#!/usr/bin/env python

"""

bindsym Control+Up           exec amixer -q sset Master 2%+ unmute
bindsym Control+Down         exec amixer -q sset Master 2%- unmute
bindsym XF86AudioRaiseVolume exec amixer -q set Master 2dB+ unmute
bindsym XF86AudioLowerVolume exec amixer -q set Master 2dB- unmute
bindsym XF86AudioMute exec amixer -q set Master toggle; exec amixer -q set Headphone unmute; exec amixer -q set Speaker unmute # does not work proberbly

"""

from subprocess import Popen, PIPE
import sys
import numpy
import re


def shell(cmd, shell=False):

    if shell:
        p = Popen(cmd, shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE)
    else:
        cmd = cmd.split()
        p = Popen(cmd, stdin=PIPE, stdout=PIPE, stderr=PIPE)

    output, err = p.communicate()
    return output


if __name__ == "__main__":

    args = sys.argv[1:]

    # shell('notify-send " " "volume changed"', shell=True)

    sinks = shell('pactl list short sinks')
    sinks = sinks.split('\n')
    sinks = [sink.strip() for sink in sinks]
    sinks = list(filter(None, sinks))

    cards = shell('pactl list cards short')
    cards = cards.split('\n')
    cards = [card.strip() for card in cards]
    cards = list(filter(None, cards))

    pactl_info = shell('pactl info')
    pactl_info = pactl_info.split('\n')
    pactl = {}

    for info in pactl_info:
        info = info.strip()
        if info == "": continue
        info = info.split(": ")
        pactl[info[0]] = info[1]

    laptop_speaker_id = 'X'
    bluetooth_headset_id = 'X'
    dock_id = 'X'

    for sink in sinks:

        # bluetooth
        if "blue" in sink:
            sink = sink.split()
            bluetooth_headset_id = sink[0]

        # laptop speaker
        elif "pci" in sink:
            sink = sink.split()
            laptop_speaker_id = sink[0]

        # dock output
        elif "Dock" in sink:
            sink = sink.split()
            dock_id = sink[0]

        else:
            print "error, not bluetooth or default"
            print sink
            quit()


    if len(args) < 1:
        print "Usage: sound <change>"
        print
        for key in pactl:
            if "Sink" not in key: continue
            print key+":", "\n", pactl[key]

        print
        print "found",len(sinks),"sinks:"
        for sink in sinks:
            print " ".join(sink.split()[:2])

        print
        print "found", len(cards), "cards:"
        for card in cards:
            print " ".join(card.split()[:2])

        quit()


    # get change
    change = args[0]

    if change == "mute":
        change = 0

    if len(sinks) == 1:
        sink = laptop_speaker_id
        shell('pactl set-sink-volume {} {}%'.format(sink, change))
        quit()



    if bluetooth_headset_id != 'X':

        sink = bluetooth_headset_id

        # check if bluetooth is default output
        if "blue" not in pactl['Default Sink']:
            shell('pactl set-default-sink {}'.format(sink))

            # Set default sound volume to 30%
            # so it does not blow my head off
            change = "30"

        shell('pactl set-sink-volume {} {}%'.format(sink, change))

        for sink in sinks:
            sink = sink.split()
            sink = sink[0]
            if sink == bluetooth_headset_id: continue
            shell('pactl set-sink-volume {} {}%'.format(sink, 0))

    else:

        sink = dock_id

        if "Dock" not in pactl['Default Sink']:
            print "not default"
            shell('pactl set-default-sink {}'.format(sink))

            # Set default sound volume to 30%
            # so it does not blow my head off
            change = "30"

        shell('pactl set-sink-volume {} {}%'.format(sink, change))


